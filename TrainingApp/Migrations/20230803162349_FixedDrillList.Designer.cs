// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrainingApp.Data;

#nullable disable

namespace TrainingApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230803162349_FixedDrillList")]
    partial class FixedDrillList
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrainingApp.Features.Authentication.Models.UserSession", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("TrainingApp.Features.Trainings.FixedDrills.FixedDrill", b =>
                {
                    b.Property<int>("FixedDrillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FixedDrillId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("FixedDrillId");

                    b.ToTable("FixedDrills");

                    b.HasData(
                        new
                        {
                            FixedDrillId = 1,
                            Category = "Defense",
                            Name = "Slide and Closeout"
                        },
                        new
                        {
                            FixedDrillId = 2,
                            Category = "Defense",
                            Name = "1/4 Court Closeout and Slide"
                        },
                        new
                        {
                            FixedDrillId = 3,
                            Category = "Defense",
                            Name = "Full Court Zig-Zags"
                        },
                        new
                        {
                            FixedDrillId = 4,
                            Category = "Defense",
                            Name = "Lane to Lane Slides"
                        },
                        new
                        {
                            FixedDrillId = 5,
                            Category = "Defense",
                            Name = "1v1 Deny"
                        },
                        new
                        {
                            FixedDrillId = 6,
                            Category = "Defense",
                            Name = "2v2 Deny"
                        },
                        new
                        {
                            FixedDrillId = 7,
                            Category = "Defense",
                            Name = "3v3 Deny"
                        },
                        new
                        {
                            FixedDrillId = 8,
                            Category = "Defense",
                            Name = "4v4 Deny"
                        },
                        new
                        {
                            FixedDrillId = 9,
                            Category = "Defense",
                            Name = "Tunnel Drill"
                        },
                        new
                        {
                            FixedDrillId = 10,
                            Category = "Defense",
                            Name = "1v1 Half Court"
                        },
                        new
                        {
                            FixedDrillId = 11,
                            Category = "Transition",
                            Name = "Rebound and Outlet"
                        },
                        new
                        {
                            FixedDrillId = 12,
                            Category = "Transition",
                            Name = "2v1 Attack"
                        },
                        new
                        {
                            FixedDrillId = 13,
                            Category = "Transition",
                            Name = "3v2 Attack"
                        },
                        new
                        {
                            FixedDrillId = 14,
                            Category = "Transition",
                            Name = "4v4 Line Touch"
                        },
                        new
                        {
                            FixedDrillId = 15,
                            Category = "Transition",
                            Name = "Miami Heat"
                        },
                        new
                        {
                            FixedDrillId = 16,
                            Category = "Transition",
                            Name = "5v3 Transition"
                        },
                        new
                        {
                            FixedDrillId = 17,
                            Category = "Passing",
                            Name = "Entry Pass"
                        },
                        new
                        {
                            FixedDrillId = 18,
                            Category = "Passing",
                            Name = "Pass to Cutter"
                        },
                        new
                        {
                            FixedDrillId = 19,
                            Category = "Passing",
                            Name = "Pass to Cutter Extra DEF"
                        },
                        new
                        {
                            FixedDrillId = 20,
                            Category = "Passing",
                            Name = "Ontario Passing"
                        },
                        new
                        {
                            FixedDrillId = 21,
                            Category = "Passing",
                            Name = "Fishhook"
                        },
                        new
                        {
                            FixedDrillId = 22,
                            Category = "Passing",
                            Name = "Italian Passing"
                        },
                        new
                        {
                            FixedDrillId = 23,
                            Category = "Passing",
                            Name = "3v3 Drive and Pitch"
                        },
                        new
                        {
                            FixedDrillId = 24,
                            Category = "Passing",
                            Name = "5v5 - No Dribble"
                        },
                        new
                        {
                            FixedDrillId = 25,
                            Category = "Passing",
                            Name = "4 Corner Passing"
                        },
                        new
                        {
                            FixedDrillId = 26,
                            Category = "Screening",
                            Name = "On Ball Defense"
                        },
                        new
                        {
                            FixedDrillId = 27,
                            Category = "Screening",
                            Name = "Off Ball Defense"
                        },
                        new
                        {
                            FixedDrillId = 28,
                            Category = "Screening",
                            Name = "Back Screens"
                        },
                        new
                        {
                            FixedDrillId = 29,
                            Category = "Screening",
                            Name = "Flex Screens"
                        },
                        new
                        {
                            FixedDrillId = 30,
                            Category = "Screening",
                            Name = "1v1 Ball Screen w/ Blocker"
                        },
                        new
                        {
                            FixedDrillId = 31,
                            Category = "Screening",
                            Name = "3v3 Ball Screen"
                        },
                        new
                        {
                            FixedDrillId = 32,
                            Category = "Screening",
                            Name = "4v4 Ball Screen"
                        },
                        new
                        {
                            FixedDrillId = 33,
                            Category = "Screening",
                            Name = "Hitman Drill"
                        },
                        new
                        {
                            FixedDrillId = 34,
                            Category = "DecisionMaking",
                            Name = "4v4 Half Court Trap"
                        },
                        new
                        {
                            FixedDrillId = 35,
                            Category = "DecisionMaking",
                            Name = "4v3 Rebound and Transition"
                        },
                        new
                        {
                            FixedDrillId = 36,
                            Category = "Sets",
                            Name = "OFF Plays"
                        },
                        new
                        {
                            FixedDrillId = 37,
                            Category = "Sets",
                            Name = "DEF Sets"
                        },
                        new
                        {
                            FixedDrillId = 38,
                            Category = "Sets",
                            Name = "Out of Bounds"
                        },
                        new
                        {
                            FixedDrillId = 39,
                            Category = "Sets",
                            Name = "Pressbreak"
                        });
                });

            modelBuilder.Entity("TrainingApp.Features.Trainings.UserTraining", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainingId"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AgeGroup");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TrainingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTraining");
                });

            modelBuilder.Entity("TrainingApp.Features.Trainings.UserTrainingDrills.UserTrainingDrill", b =>
                {
                    b.Property<int>("UserTrainingDrillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserTrainingDrillId"));

                    b.Property<int>("DrillId")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int>("UserTrainingId")
                        .HasColumnType("integer");

                    b.HasKey("UserTrainingDrillId");

                    b.HasIndex("DrillId");

                    b.HasIndex("UserTrainingId");

                    b.ToTable("UserTrainingDrills");
                });

            modelBuilder.Entity("TrainingApp.Features.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TrainingApp.Features.Authentication.Models.UserSession", b =>
                {
                    b.HasOne("TrainingApp.Features.Users.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingApp.Features.Trainings.UserTraining", b =>
                {
                    b.HasOne("TrainingApp.Features.Users.User", "User")
                        .WithMany("UserTrainings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingApp.Features.Trainings.UserTrainingDrills.UserTrainingDrill", b =>
                {
                    b.HasOne("TrainingApp.Features.Trainings.FixedDrills.FixedDrill", "FixedDrill")
                        .WithMany("UserTrainingDrills")
                        .HasForeignKey("DrillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingApp.Features.Trainings.UserTraining", "UserTraining")
                        .WithMany("UserTrainingDrills")
                        .HasForeignKey("UserTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FixedDrill");

                    b.Navigation("UserTraining");
                });

            modelBuilder.Entity("TrainingApp.Features.Trainings.FixedDrills.FixedDrill", b =>
                {
                    b.Navigation("UserTrainingDrills");
                });

            modelBuilder.Entity("TrainingApp.Features.Trainings.UserTraining", b =>
                {
                    b.Navigation("UserTrainingDrills");
                });

            modelBuilder.Entity("TrainingApp.Features.Users.User", b =>
                {
                    b.Navigation("UserSessions");

                    b.Navigation("UserTrainings");
                });
#pragma warning restore 612, 618
        }
    }
}
